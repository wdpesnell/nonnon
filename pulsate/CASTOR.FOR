      PROGRAM CASTOR
      IMPLICIT REAL*8(A-H,O-Z)
C
C          THE LAGRANGIAN RADIAL NONADIABATIC STABILITY ANALYSIS
C       FOR STELLAR PULSATIONS. THE NOTATION IS LIFTED FROM THE MODEL
C       CODE AND RADIAL STABILITY ANALYSIS. WRITTEN NOV. 1983 WITH
C       NUCLEAR BURNING AND (FROZEN) CONVECTION ADDED DEC. 1983.
C
C                                                12/20/83 WD PESNELL
C
      COMMON/PHYPAR/ RP(800),TP(800),VP(800),CV(800),DKDR(800),
     $               DKDT(800),DM1(800),AKAP(800),DM2(800),RM(800),
     $               P(800),G1(800),G3M1(800)
      COMMON/CONST/  ZERO,ONE,TWO,THRE,FOR,TEN,AHF,QRT
      COMMON/BLK1/   IRAD,NFLAG,NPTS
      COMMON/OBSERV/ TEFF,RLUMGV,TOTMAS,RPHOTO,CORLUM
      COMMON/COOLUM/ NOBURN,ONEMQ0,ONEMQ1,RLUMS,RLUMC
      COMMON/LUMINS/ FRFT(800),SORCE(800),DTSORC(800),DVSORC(800)
      DIMENSION ITITL(20)
C
C          FILES IN THIS PROGRAM.
C  UNIT   ROUTINE    NAME                PURPOSE
C    5      MAIN    SYS$INPUT           TERMINAL INPUT FILE
C    6      MAIN    SYS$OUTPUT          TERMINAL OUTPUT FILE
C    9      MAIN    SUMOUT              SUMMARY OUTPUT FILE
C
C   10      MAIN    LNRAD               CONTAINS THE MODEL QUANTITIES
C                (LOGICAL TO NONDMP.DAT)   FOR USE BY THE STABILITY
C                                          ANALYSES.
C   11      MAIN    CASOUT              MAIN OUTPUT FILE
C
C   12     PLTINT   CASPLT              HAS VECTORS OF EIGENVECTORS
C                                          QUANTITIES FOR PLTCMD PROGRAM
C
      OPEN (UNIT=5,FILE='SYS$INPUT',STATUS='OLD')
      OPEN (UNIT=6,FILE='SYS$OUTPUT',STATUS='OLD')
      OPEN (UNIT=9,FILE='SUMOUT',STATUS='UNKNOWN',ACCESS='APPEND')
      OPEN (UNIT=11,FILE='CASOUT',STATUS='NEW')
C
C          READ IN THE INPUT VARIABLES FROM FILE 10.
C
      OPEN (UNIT=10,FILE='LNRAD',STATUS='OLD',READONLY)
      READ(10,1001) (ITITL(I),I=1,20)
      READ(10,*) NPTS,RLUMGV,TOTMAS,TEFF,RPHOTO,CORLUM
      READ(10,*) IRAD,NOBURN,ONEMQ0,ONEMQ1,RLUMS,RLUMC
      NP1 = NPTS+1
      READ(10,1000) (RP(I),I=1,NP1)
      READ(10,1000) (TP(I),I=1,NPTS)
      READ(10,1000) (VP(I),I=1,NPTS)
      READ(10,1000) (CV(I),I=1,NPTS)
      READ(10,1000) (DKDR(I),I=1,NPTS)
      READ(10,1000) (DKDT(I),I=1,NPTS)
      READ(10,1000) (DM1(I),I=1,NPTS)
      READ(10,1000) (AKAP(I),I=1,NPTS)
      READ(10,1000) (DM2(I),I=1,NP1)
      READ(10,1000) (RM(I),I=1,NP1)
      READ(10,1000) (P(I),I=1,NPTS)
      READ(10,1000) (G1(I),I=1,NPTS)
      READ(10,1000) (G3M1(I),I=1,NPTS)
      READ(10,1000) (FRFT(I),I=1,NP1)
      READ(10,1000) (SORCE(I),I=1,NPTS)
      READ(10,1000) (DTSORC(I),I=1,NPTS)
      READ(10,1000) (DVSORC(I),I=1,NPTS)
      CLOSE (UNIT=10)
C
C          IOUT:= 0 FOR LITTLE OUTPUT (NO EIGENVECTORS)
C                 1 FOR EIGENVECTORS
C                 2 FOR EIGENVECTORS, MATRICES AND CONVER. INFO.
C
C          IHMIN:= NUMBER OF NODES+1 IN LOWEST EIGENVECTOR.
C
C          IHMAX:= NUMBER OF NODES+1 IN HIGHEST EIGENVECTOR.
C
      WRITE(6,1010)
      READ(5,*) IOUT,IHMIN,IHMAX
      WRITE(9,2000) (ITITL(I),I=1,20),NPTS
      WRITE(9,2001) RLUMGV,TOTMAS,TEFF,RPHOTO,RP(1),CORLUM
      WRITE(9,2002) IRAD,NOBURN,ONEMQ0,ONEMQ1,RLUMS,RLUMC
      WRITE(11,2000) (ITITL(I),I=1,20),NPTS
      WRITE(11,2001) RLUMGV,TOTMAS,TEFF,RPHOTO,RP(1),CORLUM
      WRITE(11,2002) IRAD,NOBURN,ONEMQ0,ONEMQ1,RLUMS,RLUMC
      WRITE(11,2003) IOUT,IHMIN,IHMAX
      WRITE(11,2004)
      WRITE(11,2005) (I,RP(I+1),TP(I),VP(I),P(I),G1(I),G3M1(I),AKAP(I),
     $      DKDR(I),DKDT(I),CV(I),FRFT(I+1),RM(I+1),I=1,NPTS)
C
C          CHECK FOR NUCLEAR BURNING AND PRINT OUT THOSE
C       ZONES PARTICIPATING.
C
      DO 10 I=1,NPTS
         J = NP1-I
         IF( SORCE(J) .NE. ZERO ) GOTO 15
  10  CONTINUE
      WRITE(11,2100)
      GOTO 20
  15  CONTINUE
      WRITE(11,2101) (I,SORCE(I),DTSORC(I),DVSORC(I),I=1,J)
  20  CONTINUE
      CALL PLTINT(800,NPTS)
      CALL LNA(IOUT,IHMIN,IHMAX)
      STOP
C
 1000 FORMAT(1P4E20.13)
 1001 FORMAT(20A4)
 1010 FORMAT(X,29HENTER IOUT, IHMIN, AND IHMAX.)
C
 2000 FORMAT(1H1,/,X,19HOUTPUT FROM CASTOR.,/,
     $      50H  INITIAL MODEL IN HYDROSTATIC AND THERMAL BALANCE,//,
     $      2X,20A4,X,I5,6H ZONES,/)
 2001 FORMAT(4X,18H TOTAL LUMINOSITY=,1PE11.4,12H TOTAL MASS=,E11.4,
     $ 17H EFFECTIVE TEMP.=,E11.4,/,6X,21H PHOTOSPHERIC RADIUS=,E11.4,
     $ 13H CORE RADIUS=,E11.4,11H CORE LUM.=,E11.4)
 2002 FORMAT(6H IRAD=,I2,8H NOBURN=,I2,8H ONEMQ0=,1PE10.3,
     $ 8H ONEMQ1=,E10.3,7H RLUMS=,E10.3,7H RLUMC=,E10.3)
 2003 FORMAT(10X,6H IOUT=,I2,7H IHMIN=,I3,7H IHMAX=,I3)
 2004 FORMAT(3X,1HI,3X,6HRADIUS,5X,4HTEMP,5X,6HSP.VOL,3X,8HPRESSURE,
     $ 5X,2HG1,7X,4HG3M1,5X,7HOPACITY,3X,6HDLKDLR,4X,6HDLKDLT,6X,
     $ 2HCV,7X,4HFRFT,4X,8HINT.MASS)
 2005 FORMAT(X,I4,1P12E10.3)
 2100 FORMAT(/,30H MODEL HAS NO NUCLEAR BURNING.)
 2101 FORMAT(/,29H FOLLOWING ZONES ARE IGNITED.,/,(3(X,I4,1P3E10.3)))
      END
      BLOCK DATA
      IMPLICIT REAL*8(A-H,O-Z)
C
C       FUNDAMENTAL CONSTANTS ARE FROM NOVOTNY, INTRODUCTION TO
C    STELLAR ATMOSPHERES AND INTERIORS, 1973, APPENDIX II.
C                                                 2/16/83  WDP
C
      COMMON/CONST/  ZERO,ONE,TWO,THRE,FOR,TEN,AHF,QRT
      COMMON/BLK8/   GRAV,AC3,SIGMA,PI,PI2,PI4,PI8,PI43
      COMMON/THERMO/ R,A,BK,AVAGD,AD3
      DATA R,A,BK,AVAGD,AD3 / 8.31434D7,7.56471D-15,8.6170837D-5,
     $     6.02217D23,2.52157D-15 /
      DATA GRAV,AC3,SIGMA,PI,PI2,PI4,PI8,PI43/6.6726D-8,7.5595D-5,
     $  5.66961D-5,3.1415926536D0,6.2831853072D0,12.5663706144D0,
     $   25.1327412288D0,4.1887902048D0 /
      DATA ZERO,ONE,TWO,THRE,FOR,TEN,AHF,QRT /
     $      0.0D0,1.0D0,2.0D0,3.0D0,4.0D0,10.0D0,
     $      0.5D0,0.25D0      /
      END
      SUBROUTINE LNA(IO,IHMIN,IHMAX)
      IMPLICIT REAL*8(A-H,O-Z)
C
C     *****************************************************************
C      PULSATION EQUATION SOLVER
C      BASIC REFERENCES -- CASTOR, AP.J. 166, (109) 1971.
C                          PESNELL, 1983, THESIS, UNIV. OF FLORIDA.
C                          PESNELL, 1987, PASP, SUBMITTED.
C     *****************************************************************
C
C          THIS VERSION OF THE LNA RADIAL STABILITY ANALYSIS IS SUITABLE
C       FOR ENVELOPE MODELS GENERATED WITH THE "MODEL" BUILDING CODE.
C       THE INNER BOUNDARY IS INVALID FOR A COMPLETE MODEL AND MODELS
C       OF LOW CENTRAL CONDENSATION. HOWEVER, THE EIGENVALUE IS SOMEWHAT
C       INSENSITIVE TO THESE DETAILS AND ARE REASONABLE NO MATTER WHAT.
C
      COMPLEX*16 X0,Y0,Y1,Z,XS,DROR,DLUM,OMSQ1,COMEGA,DRHO,DPRESS,
     $  DTEMP,AMAT,OMA,ERRA,ERR,OMB,CZERO,CZI,DLTH,DLMECH
C
C        ARRAYS ARE REARRANGED FROM THE ORIGINAL LNA CODE
C
      COMMON/PHYPAR/ R(800),T(800),V(800),CV(800),DLKDLR(800),
     $       DLKDLT(800),DM1(800),GKAP(800),DM2(800),RM(800),
     $       P(800),G1(800),G3M1(800)
      COMMON/SCRTCH/ AG1(800,3),AG2(800,2),AK1(800,4),AK2(800,3),
     $       BL2(800,2),BL1(800,3),DR(800,2)
      COMMON XS(1600),Y0(800),Y1(800),X0(800),DROR(800),
     $   DLTH(800),DLMECH(800),DLUM(800),DRHO(800),XAMP(800),XPHA(800),
     $   RHOAMP(800),RHOPHA(800),PRAMP(800),PRPHA(800),TEMAMP(800),
     $   TEMPHA(800),GLAMP(800),GLPHA(800),W(800),CVT(800)
      COMMON/BLK1/   IRAD,NFLAG,N
      COMMON/BLK8/   G,AC3,ACRAD,PI,TWOPI,FORPI,PI8,PI43
      COMMON/BLK37/  YO(800),XO(800),WORK(800),DRO(800),DP(800),
     $       DT(800),DL(800)
      COMMON/LUMINS/ FRFT(800),SORCE(800),DTSORC(800),DVSORC(800)
      COMMON/OBSERV/ TEFF,RLUMGV,TOTMAS,RPHOTO,CORLUM
      COMMON/CONST/  ZERO,ONE,TWO,THRE,FOR,TEN,AHF,QRT
      DIMENSION AMAT(1600,7)
      DIMENSION ZZERO(800,36),SZERO(800,19)
      EQUIVALENCE (ZZERO(1),XS(1)),(SZERO(1),AG1(1,1))
      DATA CZERO/(0.0D0,0.0D0)/,ACCUR/1.D-10/
C
C   ZERO COMMON BLOCKS SCRTCH AND (BLANK).
C
      NMAX = (800)
      DO 5 J=1,36
         DO 5 I=1,NMAX
            ZZERO(I,J) = ZERO
   5  CONTINUE
      DO 6 J=1,19
         DO 6 I=1,NMAX
            SZERO(I,J) = ZERO
   6  CONTINUE
      NP = N+1
      NM1 = N-1
C
      RLUMX = CORLUM
      AFAC = FORPI*R(1)**2/DSQRT(DM2(1))
      DO 60 I=1,NP
         AFACP = AFAC
         IF( I .EQ. NP ) GOTO 40
         AFAC = FORPI*R(I+1)**2/DSQRT(DM2(I+1))
C
C          CHANGE DLN(KAPPA)/DLN(RHO)<T> TO DLN(KAPPA)/DLN(RHO)<S>
C
         DLKDLR(I) = DLKDLR(I)+G3M1(I)*DLKDLT(I)
         DR(I,1) = AFACP/V(I)/DM1(I)
         DR(I,2) =-AFAC/V(I)/DM1(I)
         IF( I.GT.1 ) GOTO 20
         BL1(I,1) = ZERO
         BL1(I,2) = ZERO
         BL1(I,3) = ZERO
         BL2(I,1) = ZERO
         BL2(I,2) = ZERO
         GOTO 60
  20    CONTINUE
C
C          SET UP THE MECHANICAL MATRICES.
C
         AG1(I,1) =-AFACP*G1(I-1)*P(I-1)*DR(I-1,1)
         AG1(I,2) =-FOR*G*RM(I)/R(I)**3 + AFACP*(G1(I)*P(I)*DR(I,1)-
     $               G1(I-1)*P(I-1)*DR(I-1,2) )
         AG1(I,3) = AFACP*G1(I)*P(I)*DR(I,2)
         AG2(I,1) =-AFACP*G3M1(I-1)/V(I-1)
         AG2(I,2) = AFACP*G3M1(I)/V(I)
C
C          INITIALIZE THE THERMAL MATRICES, IF IRAD=1 USE THE
C       STELLINGWERF INTERPOLATION FORMULA.
C
         DTL1 = T(I-1)**4
         DTL2 = T(I)**4
         IF( IRAD .NE. 1 ) GOTO 21
         T4OKI = DTL2/GKAP(I)
         T4OKI1 = DTL1/GKAP(I-1)
         DIFF = T4OKI-T4OKI1
         WIOWI1 = DLOG(DTL2/DTL1)
         WOWSQ = WIOWI1**2
         GKOGK1 = DLOG(GKAP(I)/GKAP(I-1))
         DENOM = ONE - GKOGK1/WIOWI1
       BL1(I,1) = DR(I-1,1)*((-FOR*G3M1(I-1)+DLKDLR(I-1))*(T4OKI1/DIFF)
     $  + (-DLKDLR(I-1)/WIOWI1+FOR*G3M1(I-1)*GKOGK1/WOWSQ)/DENOM)
         IF( I .EQ. 2 ) BL1(2,1) = ZERO
         BL1(I,2) = FOR/(R(I)*DSQRT(DM2(I))) +
     $     DR(I,1)*((FOR*G3M1(I)-DLKDLR(I))*(T4OKI/DIFF) +
     $    (DLKDLR(I)/WIOWI1-FOR*G3M1(I)*GKOGK1/WOWSQ)/DENOM ) +
     $  DR(I-1,2)*((-FOR*G3M1(I-1)+DLKDLR(I-1))*(T4OKI1/DIFF) +
     $    (-DLKDLR(I-1)/WIOWI1+FOR*G3M1(I-1)*GKOGK1/WOWSQ)/DENOM )
         BL1(I,3) = DR(I,2)*((FOR*G3M1(I)-DLKDLR(I))*(T4OKI/DIFF)
     $     + (DLKDLR(I)/WIOWI1-FOR*G3M1(I)*GKOGK1/WOWSQ)/DENOM)
         BL2(I,1) = ((-FOR+DLKDLT(I-1))*(T4OKI1/DIFF)
     $  - (DLKDLT(I-1)/WIOWI1-FOR*GKOGK1/WOWSQ)/DENOM)/(CV(I-1)*T(I-1))
         BL2(I,2) = ((FOR-DLKDLT(I))*(T4OKI/DIFF)
     $  + (DLKDLT(I)/WIOWI1-FOR*GKOGK1/WOWSQ)/DENOM)/(CV(I)*T(I))
         GOTO 50
  21    CONTINUE
C
C          STOBIE LUMINOSITY FORMULA.
C
         AM = QRT*( R(I-1) + THRE*R(I) )
         AP = QRT*( R(I+1) + THRE*R(I) )
         DKAPL1 = (FORPI*AM**2)**2*DTL1/DM1(I-1)/GKAP(I-1)
         DKAPL2 = (FORPI*AP**2)**2*DTL2/DM1(I)/GKAP(I)
         Q = DKAPL1+DKAPL2
         DTL1 = 8.0D0*DTL1*DTL2/(DTL1**2-DTL2**2)
         A = DTL1+FOR*DKAPL1/Q
         B = FOR-A
         F =-DKAPL1/Q
         GG =-ONE - F
         C =-F/(AM*DSQRT(DM2(I-1)))
         IF( I .EQ. 2 ) C = ZERO
         DD = THRE*(DKAPL1/AM+DKAPL2/AP)/(Q*DSQRT(DM2(I)))
         E =-GG/AP/DSQRT(DM2(I+1))
         AM = A*G3M1(I-1)+F*DLKDLR(I-1)
         AP = B*G3M1(I)+GG*DLKDLR(I)
C
C      BL'S COME FROM LINEARIZATION OF LUMINOSITY DIFFERENCE EQUATION
C
         BL1(I,1) = C+DR(I-1,1)*AM
         IF( I .EQ. 2 ) BL1(2,1) = ZERO
         BL1(I,2) = DD+DR(I-1,2)*AM+DR(I,1)*AP
         BL1(I,3) = E+DR(I,2)*AP
         BL2(I,1) = (A+F*DLKDLT(I-1))/(CV(I-1)*T(I-1))
         BL2(I,2) = (B+GG*DLKDLT(I))/(CV(I)*T(I))
         GOTO 50
  40    CONTINUE
         TAU = GKAP(N)*DM1(N)/(FOR*FORPI*R(N)*R(N))
         TAU = 1.5D0*TAU/(ONE+1.5D0*TAU)
         BBB = (R(NP)-RPHOTO)/R(NP)
         EF1 = (ONE+AHF*BBB)/(ONE+BBB)
         EF3 = TWO/(ONE+BBB)
         BL1(NP,1) = EF1*DR(N,1)*( FOR*G3M1(N) - TAU*(ONE+DLKDLR(N)) )
         BL1(NP,2) = (EF3-TAU*EF1*TWO)/(R(NP)*DSQRT(DM2(NP))) +
     $      DR(N,2)*EF1*(FOR*G3M1(N) - TAU*(ONE+DLKDLR(N)))
         BL1(NP,3) = ZERO
         BL2(NP,1) = EF1*(FOR - TAU*DLKDLT(N))/(CV(N)*T(N))
         BL2(NP,2) = ZERO
         G1P = G1(N)*P(N)
         G3M1OV = G3M1(N)/V(N)
         G1P = G1P-1.00855D-14*T(N)**4*G3M1(N)
         G3M1OV = G3M1OV-1.00855D-14*T(N)**3/CV(N)
         FSUBA = ONE
         AG1(NP,1) =-FSUBA*AFACP*G1P*DR(N,1)
         AG1(NP,2) =-FOR*G*RM(NP)/R(NP)**3-FSUBA*AFACP*G1P*DR(N,2)
         AG1(NP,3) = ZERO
         AG2(NP,2) = ZERO
         AG2(NP,1) =-FSUBA*AFACP*G3M1OV
  50    CONTINUE
         GLOM = FRFT(I-1)*RLUMX/DM1(I-1)
         RLUMX = RLUMX + SORCE(I-1)*DM1(I-1)
         GLOM1 = FRFT(I)*RLUMX/DM1(I-1)
         DEDR = (DVSORC(I-1)-DTSORC(I-1)*G3M1(I-1))*SORCE(I-1)
         DEDS = DTSORC(I-1)*SORCE(I-1)/(T(I-1)*CV(I-1))
         AK1(I-1,1) = GLOM*BL1(I-1,1)
         AK1(I-1,2) = GLOM*BL1(I-1,2)-GLOM1*BL1(I,1)-DEDR*DR(I-1,1)
         AK1(I-1,3) = GLOM*BL1(I-1,3)-GLOM1*BL1(I,2)-DEDR*DR(I-1,2)
         AK1(I-1,4) =-GLOM1*BL1(I,3)
         AK2(I-1,1) = GLOM*BL2(I-1,1)
         AK2(I-1,2) = GLOM*BL2(I-1,2)-GLOM1*BL2(I,1) + DEDS
         AK2(I-1,3) =-GLOM1*BL2(I,2)
  60  CONTINUE
      GLOM = RLUMGV/(AHF*DM1(N))
      AK1(NP,1) = GLOM*BL1(NP,1)
      AK1(NP,2) = GLOM*BL1(NP,2)
      AK1(NP,3) = ZERO
      AK1(NP,4) = ZERO
      AK2(NP,1) = GLOM*BL2(NP,1)
      AK2(NP,2) = ZERO
      AK2(NP,3) = ZERO
C
C          WRITE THE MATRICES TO FILE TAPE11, IF IO IS LESS
C       THAN 3, THIS WRITE IS NOT DONE.
C
      IF( IO .LT. 3 ) GOTO 76
      WRITE(11,7000)
      DO 75 I=1,NP
         WRITE(11,7001) I,AG1(I,1),AG1(I,2),AG1(I,3),AG2(I,1),AG2(I,2),
     $    AK1(I,1),AK1(I,2),AK1(I,3),AK1(I,4),AK2(I,1),AK2(I,2),AK2(I,3)
  75  CONTINUE
  76  CONTINUE
C
C          CALCULATE THE ACOUSTIC TAVEL TIME FROM SURFACE TO THE
C       INNERMOST ZONE. THIS IS STORED IN TRANST.
C
      TRANST = ZERO
      DO 77 I=2,NP
         TRANST = TRANST+(R(I)-R(I-1))/DSQRT(P(I-1)*V(I-1)*G1(I-1))
  77  CONTINUE
      RHOM = TOTMAS/(PI43*R(NP)**3)
      TERMQ = DSQRT(RHOM/1.41D0)
      TCON = PI43*G*RHOM*DFLOAT(N)**2
      X0NP = R(NP)*DSQRT(DM2(NP))
      OMSQP = ZERO
      OMSQC = 5.D-4*DFLOAT(IHMIN)*TCON
      IV = 0
C
C          START OF ADIABATIC LOOP
C
      DO 79 IH=IHMIN,IHMAX
      WRITE(11,7900) IH
  78  CONTINUE
      OMSQC = OMSQC*TWO
      DO 80 ITERAD=1,20
C
      IF(IO.GE.1) WRITE(11,7800) ITERAD,IV,IH,OMSQ,OMSQC,OMSQP
      OMSQ = AHF*(OMSQC+OMSQP)
C
C          INSURE THAT INITIAL OMSQC GIVES IV .GE. IV-1
C
      IF( ITERAD .EQ. 1) OMSQ = OMSQC
      OMSQS = OMSQ
C
C          ITERATION ON THE OUTER BOUNDARY CONDITION
C
      DO 81 ICOUNT=1,30
C
         DO 82 I=1,NP
            XO(I) = ZERO
            YO(I) = ZERO
  82     CONTINUE
         YO(N) =-AG1(N,3)*X0NP
         CALL TRISOL(AG1,2,N,OMSQ,YO,XO,NMAX)
        IF( ICOUNT .EQ. 1 ) GOTO 85
         QERR = AG1(NP,1)*XO(N)+(AG1(NP,2)-OMSQ)*X0NP
         AFACP = DABS((OMSQ-OMSQL)/OMSQL)
         QERR = QERR/XO(2)
         IF(IO.GE.1) WRITE(11,1400) ICOUNT,OMSQ,OMSQL,AFACP
        IF( AFACP .LT. 1.D-12 ) GOTO 86
         OMSQ2 = (QERRA*OMSQ-QERR*OMSQL)/(QERRA-QERR)
         OMSQL = OMSQ
         DOMSQ = OMSQ2-OMSQ
         DOMSQ = DSIGN(DMIN1(DABS(DOMSQ),QRT*DABS(OMSQ)),DOMSQ)
         OMSQ  = OMSQ + DOMSQ
         QERRA  = QERR
        GOTO 81
  85     CONTINUE
C
C          SET UP INITIAL DERIVATIVE
C
         QERRA = AG1(NP,1)*XO(N)+(AG1(NP,2)-OMSQ)*X0NP
         QERRA = QERRA/XO(2)
         OMSQL = OMSQ
         OMSQ  = OMSQ*(ONE+1.D-7)
  81  CONTINUE
C
C          NO CONVERGENCE IN THE ADIABATIC EIGENVALUE.
C
      WRITE(6,8100) OMSQ,ITERAD,IV,IH
      OMSQP = ZERO
      OMSQC = 5.D-6*TCON*DFLOAT(IH+1)
      GOTO 79
C
C          CONVERGED TO OMSQ VALUE, CHECK IF POSITIVE AND WITH
C      WITH PROPER NUMBER OF NODES IN THE DISPLACEMENT EIGEN-
C      VECTOR. IF EITHER IS NOT TRUE, TRY AGAIN.
C
  86  CONTINUE
      IF( OMSQ .GT. ZERO ) GOTO 265
C
C          NEGATIVE OMSQ VALUE, STOP WORKING ON THIS MODE AND
C       MOVE ON.
C
      WRITE(6,8600) OMSQ,IV,IH
      OMSQP = ZERO
      OMSQC = 5.D-6*TCON*DFLOAT(IH+1)
      GOTO 79
C
 265  CONTINUE
      DO 90 I=2,NM1
         YO(I) = ZERO
  90  CONTINUE
      XO(NP) = X0NP
      YO(N)  =-AG1(N,3)*X0NP
      CALL TRISOL (AG1,2,N,OMSQ,YO,XO,NMAX)
      IV = NODES(XO,NP,IO)
      IF( IV .EQ. IH-1 ) GOTO 103
C
C      IF INITIAL OMSGC GIVES IV .LT. IH-1, INCREASE OMSGC AND TRY AGAIN
C
      IF( OMSQS .EQ. OMSQC .AND. IV .LT. IH-1 ) GOTO 78
      IF( IV .LT. IH-1 ) OMSQP = OMSQS
      IF( IV .GT. IH-1 ) OMSQC = OMSQS
  80  CONTINUE
C
C          NOT CONVERGED TO A PERIOD WITH RIGHT NUMBER OF NODES,
C       TRY FOR NEXT MODE.
C
      OMEGA = DSQRT(OMSQ)
      PERIOD = TWOPI/(OMEGA*86400.D0)
      WRITE(11,8000) IV,IH,OMEGA,PERIOD
      OMSQP = ZERO
      OMSQC = 5.D-6*TCON*DFLOAT(IH)
      GOTO 79
C
 103  CONTINUE
      OMEGA = DSQRT(OMSQ)
      XO(1) = ZERO
      XO(N+2) = ZERO
      STWAIT = ZERO
      RKE = ZERO
      DO 100 I=1,N
         W(I) = XO(I)/(R(I)*DSQRT(DM2(I)))
         DRO(I) = DR(I,1)*XO(I)+DR(I,2)*XO(I+1)
         DP(I) = G1(I)*DRO(I)
         DT(I) = G3M1(I)*DRO(I)
C
C          SET UP THE WEIGHT FUNCTION CALCULATION.
C
         GLAMP(I) =-FOR*G*RM(I+1)*XO(I+1)**2/R(I+1)**3 +
     $      P(I)*V(I)*G1(I)*DRO(I)**2*DM1(I)
         STWAIT = STWAIT + GLAMP(I)
         RKE = RKE + XO(I+1)*XO(I+1)
         IF( I .EQ. 1 ) GOTO 100
         DL(I) = BL1(I,1)*XO(I-1)+BL1(I,2)*XO(I)+BL1(I,3)*XO(I+1)
 100  CONTINUE
      W(1) = ZERO
      DL(1) = ZERO
      DL(NP) = BL1(NP,1)*XO(N)+BL1(NP,2)*X0NP
      W(NP) = ONE
      PERIOD = TWOPI/OMEGA
      CALL CVTM(N,PERIOD,RLUMGV,CV,T,DM1,CVT,NMAX)
      PERIOD = PERIOD/86400.D0
      QVALUE = PERIOD*TERMQ
      STWAIT = STWAIT/RKE
      QCH = DABS((STWAIT-OMSQ)/OMSQ)
      WRITE(6,1001) IV,IH,OMEGA,PERIOD,QVALUE,OMSQ,STWAIT,QCH
      WRITE(9,1001) IV,IH,OMEGA,PERIOD,QVALUE,OMSQ,STWAIT,QCH
      WRITE(11,1001) IV,IH,OMEGA,PERIOD,QVALUE,OMSQ,STWAIT,QCH
      IV = NODES(W,NP,1)
C
C          NORMALIZE THE WEIGHT FUNCTION PER ZONE TO OMSQ.
C
      DO 105 I=1,N
         GLAMP(I) = GLAMP(I)/(OMSQ*RKE)
 105  CONTINUE
C
      IF(IO.GE.2) WRITE(11,1000) OMEGA,PERIOD,(I,W(I+1),DL(I+1),DRO(I),
     $ DT(I),DP(I),CVT(I),GLAMP(I),I=1,N)
C
C          DUMP ADIABATIC EIGENVECTORS TO CASPLT.
C
      CALL PLTDMP(W,NMAX,NP,4HDR/R)
      CALL PLTDMP(DRO,NMAX,N,4HDRHO)
      CALL PLTDMP(DL,NMAX,NP,4HDL/L)
      CALL PLTDMP(GLAMP,NMAX,N,4HWAIT)
C
C          FIND FIRST GUESS TO THE IMAGINARY PART OF OMEGA BY THE USE
C       OF THE QUASI-ADIABATIC APPROXIMATION. I.E.:
C
C               DEL(OMEGA**2) = XO*AG2*(I*OMEGA-AK2)**-1*AK1*XO.
C
C       NOTE THAT THE MINUS SIGNS IN YO(I) ARE COMPENSATED FOR BY THE
C       ROUTINE 'TRCSOL' SOLVING THE RESOLVENT AS AK2 - I*OMEGA.
C
      YO(1) =-AK1(1,2)*XO(1)-AK1(1,3)*XO(2)-AK1(1,4)*XO(3)
      Y1(1) = CZERO
      DO 110 I=2,NM1
         YO(I) =-AK1(I,1)*XO(I-1)-AK1(I,2)*XO(I)-AK1(I,3)*XO(I+1)-
     $         AK1(I,4)*XO(I+2)
         Y1(I) = CZERO
 110  CONTINUE
      YO(N) =-AK1(N,1)*XO(NM1)-AK1(N,2)*XO(N)-AK1(N,3)*X0NP
      CALL TRCSOL(AK2,1,N,(0.D0,1.D0)*OMEGA,YO,Y1,NMAX)
      CZI = CZERO
      DO 120 I=2,NP
         CZI = CZI + XO(I)*(AG2(I,1)*Y1(I-1)+AG2(I,2)*Y1(I))
 120  CONTINUE
      OMSQ1 = OMSQ + CZI/RKE
      IF( CDABS(OMSQ1) .GT. 1.5D0*OMSQ ) OMSQ1 = OMSQ*(1.D0,1.D-5)
      COMEGA = CDSQRT(OMSQ1)
      GROWTH =-FORPI*DIMAG(COMEGA)/DREAL(COMEGA)
      WRITE(9,1250) RKE,COMEGA,GROWTH
      WRITE(11,1250) RKE,COMEGA,GROWTH
C
C          NONADIABATIC ITERATION ON MODE IV STARTS HERE
C
      AFACP = 1.0D-8
      DO 130 ICOUNT=1,20
      DO 140 I=1,N
         IY = 2*I-1
         IX = 2*I
         XS(IX) = CZERO
         XS(IY) = CZERO
C
C          AMAT RESET EVERY ITERATION
C
         AMAT(IY,1) = AK1(I,1)
         AMAT(IY,2) = AK2(I,1)
         AMAT(IY,3) = AK1(I,2)
         AMAT(IY,4) = AK2(I,2)-(0.0D0,1.0D0)*COMEGA
         AMAT(IY,5) = AK1(I,3)
         AMAT(IY,6) = AK2(I,3)
         AMAT(IY,7) = AK1(I,4)
         AMAT(IX,1) = CZERO
         AMAT(IX,2) = AG1(I+1,1)
         AMAT(IX,3) = AG2(I+1,1)
         AMAT(IX,4) = AG1(I+1,2)-OMSQ1
         AMAT(IX,5) = AG2(I+1,2)
         AMAT(IX,6) = AG1(I+1,3)
         AMAT(IX,7) = CZERO
 140  CONTINUE
      WRITE(11,1400) ICOUNT,OMSQ,COMEGA,OMSQ1
      XS(2*N-3) =-AK1(N-1,4)*X0NP
      XS(2*N-2) =-AG1(N,3)*X0NP
      XS(2*N-1) =-AK1(N,3)*X0NP
      CALL CBMLES (AMAT,1,2*N-1,7,XS,2*NMAX)
      RKE = ZERO
      DO 150 I=1,N
         Y1(I) = XS(2*I-1)
         X0(I+1) = XS(2*I)
         RKE = RKE + DCONJG(X0(I+1))*X0(I+1)
 150  CONTINUE
      X0(1) = CZERO
      X0(NP) = X0NP
      RKE = DSQRT(DABS(RKE))
      IF( ICOUNT.GT.1 ) GOTO 180
      OMA = COMEGA
      ERRA=AG1(NP,1)*X0(N)+(AG1(NP,2)-OMSQ1)*X0(NP)+AG2(NP,1)*Y1(N)
      ERRA = ERRA/RKE
C1.28      S  = ZERO
C1.28      SB = CZERO
C1.28      DO 170 I=2,NP
C1.28      CZI = AG1(I,1)*X0(I-1)+AG1(I,2)*X0(I)+AG1(I,3)*X0(I+1)+
C1.28     $   AG2(I,1)*Y1(I-1)+AG2(I,2)*Y1(I)
C1.28         S = S + DCONJG(X0(I))*X0(I)
C1.28         SB = SB + DCONJG(X0(I))*CZI
C1.28 170  CONTINUE
C1.28      OMSQ1 = SB/S
      OMSQ1 = OMSQ1*(ONE + 1.D-7)
      COMEGA = CDSQRT(OMSQ1)
      GOTO 130
 180  CONTINUE
      ERR = AG1(NP,1)*X0(N)+(AG1(NP,2)-OMSQ1)*X0(NP)+AG2(NP,1)*Y1(N)
      AFACP = CDABS((COMEGA-OMA)/OMA)
      ERR = ERR/RKE
      IF( AFACP .LT. ACCUR ) GOTO 190
      IF( IO .GE. 1 ) WRITE(11,1851) ICOUNT,AFACP,COMEGA,ERR
      OMB = (ERRA*COMEGA-ERR*OMA)/(ERRA-ERR)
      OMA = COMEGA
      COMEGA = OMB
      OMSQ1 = COMEGA*COMEGA
      ERRA = ERR
 130  CONTINUE
      WRITE(6,1300) IV,AFACP,ACCUR
      WRITE(9,1300) IV,AFACP,ACCUR
      WRITE(11,1300) IV,AFACP,ACCUR
C
C          ITERATION LOOP ENDS HERE, EVEN IF OMEGA IS NOT CONVERGED,
C       PRINT THE EIGENVECTORS.
C
C          CONVERGED ON MODE IV
C
  190 CONTINUE
      RKE = ZERO
      DO 200 I=2,NP
         DROR(I) = X0(I)/(R(I)*DSQRT(DM2(I)))
         CALL AMPPHA ( DROR(I),XAMP(I),XPHA(I))
         DRHO(I-1) = DR(I-1,1)*X0(I-1)+DR(I-1,2)*X0(I)
         CALL AMPPHA ( DRHO(I-1),RHOAMP(I-1),RHOPHA(I-1))
         DPRESS = DRHO(I-1)*G1(I-1)+Y1(I-1)*G3M1(I-1)/V(I-1)/P(I-1)
         CALL AMPPHA ( DPRESS,PRAMP(I-1),PRPHA(I-1))
         RKE = RKE + X0(I)*DCONJG(X0(I))
         WORK(I-1) = DIMAG(DCONJG(Y1(I-1))*DRHO(I-1))*DM1(I-1)*G3M1(I-1)
         DTEMP = DRHO(I-1)*G3M1(I-1)+Y1(I-1)/(CV(I-1)*T(I-1))
         CALL AMPPHA ( DTEMP,TEMAMP(I-1),TEMPHA(I-1))
C
C          DLTH AND DLMECH ARE THE THERMAL AND MECHANICAL
C       CONTRIBUTIONS TO THE LUMINOSITY VARIATIONS.
C
         DLMECH(I) = BL1(I,1)*X0(I-1)+BL1(I,2)*X0(I)+BL1(I,3)*X0(I+1)
         DLTH(I) = BL2(I,1)*Y1(I-1) + BL2(I,2)*Y1(I)
         DLUM(I) = DLTH(I) + DLMECH(I)
         CALL AMPPHA ( DLUM(I),GLAMP(I),GLPHA(I))
         Y1(I-1) = Y1(I-1)/(CV(I-1)*T(I-1))
 200  CONTINUE
      DROR(1) = CZERO
      XAMP(1) = ZERO
      XPHA(1) = ZERO
      DLUM(1) = ZERO
      GLAMP(1) = ZERO
      GLPHA(1) = ZERO
      CALL CPTDMP(DROR,NMAX,NP,4HDR/R)
      CALL CPTDMP(DRHO,NMAX,N,4HDRHO)
      CALL CPTDMP(DLUM,NMAX,NP,4HDL/L)
C
      OMEGA = DREAL(COMEGA)
      RKE = RKE*OMEGA*OMEGA*AHF
      OMIMAG = DIMAG(COMEGA)
      GROWTH =-FORPI*DIMAG(COMEGA)/OMEGA
C
C          NORMALIZED WORK INTEGRAL AND INTEGRATED WORK FUNCTION.
C
      WORK(NP) = ZERO
      YO(NP) = ZERO
      DO 205 II=1,N
         I = NP - II
         YO(I) = YO(I+1) + WORK(I)*PI/RKE
         WORK(I) = WORK(I)*PI/RKE/DABS(GROWTH)
 205  CONTINUE
      QCH = DABS((GROWTH-YO(1))/GROWTH)
C
      DO 215 I=1,N
         YO(I) = YO(I)/DABS(GROWTH)
 215  CONTINUE
      CALL PLTDMP(WORK,NMAX,N,4HWORK)
      CALL PLTDMP(YO,NMAX,N,4HWINT)
C
C          DEFINE THE INCARNATIONS OF THE PERIOD.
C
      PERIOD = TWOPI/OMEGA
      PHASE = TRANST*TWO/PERIOD
      PDAYS = PERIOD/86400.D0
C
      S = YO(1)*DABS(GROWTH)
      WRITE(6,3000) COMEGA,GROWTH,S,QCH,PERIOD,PDAYS,PHASE
      WRITE(9,3000) COMEGA,GROWTH,S,QCH,PERIOD,PDAYS,PHASE
      WRITE(11,3000) COMEGA,GROWTH,S,QCH,PERIOD,PDAYS,PHASE
C
      IF(IO.GT.1) WRITE(11,3100) OMEGA,PERIOD,GROWTH,(I,XAMP(I+1),
     $  XPHA(I+1),GLAMP(I+1),GLPHA(I+1),RHOAMP(I),RHOPHA(I),TEMAMP(I),
     $  TEMPHA(I),PRAMP(I),PRPHA(I),WORK(I),YO(I),I=1,N)
      AFAC = OMEGA**2/(PI43*G*RHOM)
      AFACP = PDAYS*TERMQ
      WRITE(11,3200) AFAC,AFACP
      IF(IO.GT.1) WRITE(11,3300) (I,DROR(I+1),DLTH(I+1),DLMECH(I+1),
     $  DLUM(I+1),DRHO(I),Y1(I),I=1,N)
      CALL WORKMX(YO,NP,NMAX)
      WRITE(11,3600) RKE
      CALL ZIE(WORK,N,NMAX)
      OMSQP = OMSQ
      OMSQC = OMSQ
  79  CONTINUE
      RETURN
C
 1250 FORMAT(25H QUASI-ADIABATIC RESULTS:,/,5X,3H J=,1PE11.3,
     $   7H OMEGA=,2E12.4,14H GROWTH RATE =,E12.4)
 1400 FORMAT(X,I4,1P7E11.4)
 1851 FORMAT(X,10HLNA ITER =,I3,7H AFACP=,1PE10.3,8H COMEGA=,
     $   2E10.3,5H ERR=,2E10.3)
 3000 FORMAT(/,X,25HLINEAR NON-ADIABATIC MODE,/,8H OMEGA =,1PE16.9,
     $   X,9H(SEC**-1),3X,15H OMEGA (IMAG) =,E16.9,/,
     $   9X,24H PREDICTED GROWTH RATE =,E14.6,/,
     $   X,32HGROWTH RATE FROM WORK INTEGRAL =,E14.6,7H ERROR=,E11.3,
     $   //,3X,9HPERIODS =,E12.4,7H (SECS),E13.4,7H (DAYS),/,
     $   X,23H ACOUSTIC TRAVEL TIME =,E13.6,8H PERIODS)
 3100 FORMAT(1H1,27H LINEAR, NON-ADIABATIC MODE,//,9H OMEGA = ,
     $ 1PE16.8,9H SEC(-1),,2X,9HPERIOD = ,E15.7,6H DAYS,,3X,
     $ 34HFRACTION ENERGY GAIN PER PERIOD = ,E14.6,//,
     $ 3X,1HI,10X,2HDX,20X,2HDL,18X,3HDRO,18X,2HDT,19X,2HDP,17X,4HWORK,
     $ /,4X,5(5X,3HAMP,6X,3HPHA,4X),3X,4HZONE,4X,8HINTEGRAL,/,
     $ (X,I3,6(X,2E10.3)) )
 3200 FORMAT(/,25H DIMENSIONLESS FREQUENCY=,1PE12.4,
     $ /,17H Q-VALUE IN DAYS=,E12.5)
 3300 FORMAT(1H1,28H CARTESIAN FORM OF DX AND DL,/,
     $ 3X,1HI,9X,2HDX,17X,6HDLTHER,15X,6HDLMECH,17X,4HDL/L,17X,
     $ 4HDRHO,16X,5HDS/CV,/,4X,6(3X,4HREAL,6X,5HIMAG.,3X),/,
     $  (X,I3,6(X,1P2E10.3)) )
 3600 FORMAT(/,15H KINETIC ENERGY,1PE16.8,7H (ERGS))
 1300 FORMAT(/,43H CAN ONLY CONVERGE ON NON-ADIABATIC PERIOD ,I2,3H TO,
     $ 1PE10.3,7H ACCUR=,E10.3,20H AFTER 20 ITERATIONS)
C
 7000 FORMAT(1H1,/X,43HPULSATION MATRICES: AG1(3), AG2(2), AK1(4),,
     $              12H AND AK2(3).)
 7001 FORMAT(X,I4,X,1P3E10.3,X,2E10.3,X,4E10.3,X,3E10.3)
 7800 FORMAT(8H ITERAD=,I3,4H IV=,I3,4H IH=,I3,6H OMSQ=,1PE12.4,
     $   7H OMSQC=,E12.4,7H OMSQP=,E12.4)
 8000 FORMAT(40H CANT FIND NO. OF NODES.EQ.IH-1...NODES=,I3,4H IH=,I3,
     $ 7H OMEGA=,1PE13.6,10H PERIOD = ,E13.6)
 8600 FORMAT(14H ADIABATIC F2=,1PE17.10,18H IS .LT. 0 FOR IV=,
     $  I3,4H IH=,I3)
 8100 FORMAT(14H ADIABATIC F2=,1PE15.6,20H NOT CONVERGED AFTER,I4,
     $   16H ITERATIONS, IH=,I4,17H NUMBER OF NODES=,I4)
 1000 FORMAT(1H1,19H ADIABATIC SOLUTION,/,9H  OMEGA =,1PE17.9,5X,
     $ 8HPERIOD =,0PF12.6,//,3X,1HI,7X,2HDR,12X,2HDL,11X,4HDRHO,11X,
     $  2HDT,12X,2HDP,11X,4HCVTM,10X,6HWEIGHT/(X,I4,1P7E14.6))
 1001 FORMAT(/,22H LINEAR ADIABATIC MODE,4H IV=,I3,4H IH=,I3,/,
     $ X,8H OMEGA =,1PE16.8,9H SEC(-1),,X,8HPERIOD =,E12.5,
     $ 6H DAYS,,X,9HQ-VALUE =,E10.3,/,
     $ X,38H EIGENFREQUENCY FROM MATRIX SOLUTION =,E12.4,/,
     $ X,38H EIGENFREQUENCY FROM WEIGHT FUNCTION =,E12.4,
     $ 7H ERROR=,E12.4)
 7900 FORMAT(1H1,//,20X,28H***** BEGIN SEARCH FOR MODE ,I2,6H *****)
      END
      SUBROUTINE CVTM(N,P,RL,CV,T,DM,X,NMAX)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION CV(NMAX),T(NMAX),DM(NMAX),X(NMAX)
C
C       COMPUTE X=SUM(CV*T*DM/RL*P) FROM OUTSIDE IN
C
      SUM = 0.0D0
      DO 10 I=1,N
         J = N+1-I
         SUM = SUM+CV(J)*T(J)*DM(J)/(RL*P)
         X(J) = SUM
  10  CONTINUE
      RETURN
      END
      SUBROUTINE CBMLES(A,IMIN,IMAX,M,Y,NMAX)
      COMPLEX*16 A,Y,DEN
      DIMENSION A(NMAX,M),Y(NMAX)
      ID=IMAX-IMIN+1
      IDM=ID-1
      MMID=(M+1)/2
      MMM=MMID-1
      DO 20 II=1,IDM
      I=IMAX+1-II
      DEN = 1.D0/A(I,MMID)
      Y(I)=Y(I)*DEN
      KMAX=MIN0(I-IMIN,MMM)
      DO 10 J=1,MMM
         A(I,J) = A(I,J)*DEN
         DO 10 KK=1,KMAX
            JK = J+KK
            K = MMID+KK
            IK = I-KK
            A(IK,JK) = A(IK,JK)-A(I,J)*A(IK,K)
  10  CONTINUE
      DO 20 KK=1,KMAX
            IK = I-KK
            K = MMID+KK
            Y(IK) = Y(IK)-Y(I)*A(IK,K)
  20  CONTINUE
      Y(IMIN) = Y(IMIN)/A(IMIN,MMID)
      IMP = IMIN+1
      DO 30 I=IMP,IMAX
         KMAX = MIN0(I-IMIN,MMM)
         DO 30 KK=1,KMAX
            IK = I-KK
            K = MMID-KK
            Y(I) = Y(I)-A(I,K)*Y(IK)
  30  CONTINUE
      RETURN
      END
      SUBROUTINE TRISOL(A,IMIN,IMAX,X,Y,Z,NMAX)
      IMPLICIT REAL*8(A-H,O-Z)
C
      DIMENSION A(NMAX,3), Y(NMAX), Z(NMAX)
      COMMON/BLK37/  USENO(800,5),E(800),F(800)
      ID = IMAX+1-IMIN
      E(IMAX) =-A(IMAX,1)/(A(IMAX,2)-X)
      F(IMAX) = Y(IMAX)/(A(IMAX,2)-X)
      DO 10 II=2,ID
         I = IMAX+1-II
         DEN = (A(I,2)-X)+A(I,3)*E(I+1)
         IF( II .EQ. ID ) GOTO 10
         E(I) =-A(I,1)/DEN
  10     F(I) = (Y(I)-A(I,3)*F(I+1))/DEN
      IMP = IMIN+1
      Z(IMIN) = F(IMIN)
      DO 20 I=IMP,IMAX
            Z(I) = E(I)*Z(I-1)+F(I)
  20  CONTINUE
      RETURN
      END
      SUBROUTINE TRCSOL(A,IMIN,IMAX,X,Y,Z,NMAX)
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMPLEX*16 E,F,DEN,X,Z
      DIMENSION A(NMAX,3), Y(NMAX), Z(NMAX)
      COMMON/BLK37/  USENO(800,3),E(800),F(800)
      ID = IMAX+1-IMIN
      E(IMAX) =-A(IMAX,1)/(A(IMAX,2)-X)
      F(IMAX) = Y(IMAX)/(A(IMAX,2)-X)
      DO 10 II=2,ID
         I = IMAX+1-II
         DEN = (A(I,2)-X)+A(I,3)*E(I+1)
         IF( II .EQ. ID ) GOTO 10
         E(I) =-A(I,1)/DEN
  10     F(I) = (Y(I)-A(I,3)*F(I+1))/DEN
      IMP = IMIN+1
      Z(IMIN) = F(IMIN)
      DO 20 I=IMP,IMAX
         Z(I) = E(I)*Z(I-1)+F(I)
  20  CONTINUE
      RETURN
      END
      SUBROUTINE AMPPHA(CA,AMP,PHA)
      IMPLICIT REAL*8(A-H,O-Z)
      COMPLEX*16 CA
      AMP = CDABS(CA)
      PHA = DATAN2(DIMAG(CA),DREAL(CA))
      RETURN
      END
      FUNCTION NODES(W,NZ,LOUT)
      IMPLICIT REAL*8(A-H,O-Z)
C
C FINDS NO. OF NODES(SIGN CHANGES) IN NZ ELEMENTS OF ARRAY W
C
      DIMENSION W(NZ),INODE(30)
      COMMON/CONST/  ZERO,ONE,TWO,THRE,FOR,TEN,AHF,QRT
C
      NODES = 0
      NZ1 = NZ-1
      DO 10 I=3,NZ1
         IF( W(I-1)*W(I) .GE. ZERO ) GOTO 10
C ZERO CROSSING FOUND. IS IT GENERAL ENOUGH TO BE A NODE#
         IF( W(I-2)*W(I-1) .LT. ZERO ) GOTO 10
         IF( W(I)*W(I+1) .LT. ZERO ) GOTO 10
          NODES = NODES + 1
          INODE(NODES) = I-1
  10  CONTINUE
      INODE(NODES+1) = NZ
      IF( LOUT .EQ. 0 ) RETURN
      WRITE(11,1000) NODES
      IF( NODES .LE. 0 ) RETURN
      WRITE(11,1001) (INODE(I),I=1,NODES)
 1000 FORMAT(/,X,I2,12H NODES FOUND)
 1001 FORMAT(7H NODES=,30I4)
      RETURN
      END
      SUBROUTINE ZIE(T,N,NZMAX)
      IMPLICIT REAL*8(A-H,O-Z)
C
C          FIND THE MAXIMA AND MINIMA IN THE WORK PER ZONE FUNCTION.
C
      DIMENSION T(NZMAX)
      COMMON/BLK37/  SPA1(800,5),IMAX(800),IMIN(800)
C
      NMAX = 0
      NMIN = 0
      IDO = N - 2
      DO 30 I=3,IDO
         MAX = 0
         IF( T(I) .GT. T(I-2) ) MAX = MAX + 1
         IF( T(I) .GT. T(I-1) ) MAX = MAX + 1
         IF( T(I) .GT. T(I+1) ) MAX = MAX + 1
         IF( T(I) .GT. T(I+2) ) MAX = MAX + 1
         IF( MAX .EQ. 0 ) GOTO 20
         IF( MAX .LT. 4 ) GOTO 30
C
C          RECORD A MAXIMUM
C
         NMAX = NMAX + 1
         IF( NMAX .GT. 100 ) GOTO 30
         IMAX(NMAX) = I
         GOTO 30
C
C          RECORD A MINIMUM
C
  20  CONTINUE
         NMIN = NMIN + 1
         IF( NMIN .GT. 100 ) GOTO 30
         IMIN(NMIN) = I
  30  CONTINUE
      WRITE(11,3000) NMAX
      IF( NMAX .LE. 0 ) GOTO 40
      WRITE(11,3001) (IMAX(I),T(IMAX(I)),I=1,NMAX)
  40  CONTINUE
      WRITE(11,4000) NMIN
      IF( NMIN .LE. 0 ) RETURN
      WRITE(11,3001) (IMIN(I),T(IMIN(I)),I=1,NMIN)
      RETURN
C
 3000 FORMAT(/,X,I4,40H MAXIMA FOUND IN WORK PER ZONE FUNCTION ,
     $  42HWHERE ZONE(I) .GT. (I-2),(I-1),(I+1),(I+2),
     $  30H...LISTED BELOW BY ZONE, VALUE)
 4000 FORMAT(/,X,I4,40H MINIMA FOUND IN WORK PER ZONE FUNCTION ,
     $  42HWHERE ZONE(I) .LE. (I-2),(I-1),(I+1),(I+2),
     $  30H...LISTED BELOW BY ZONE, VALUE)
 3001 FORMAT(8(X,I4,1PE10.3))
      END
      SUBROUTINE WORKMX(W,NZ,NZMAX)
      IMPLICIT REAL*8(A-H,O-Z)
C
C          FIND ALL MAXIMA IN NORMALIZED WORK FUNCTION.
C
      DIMENSION W(NZMAX),IMAX(800)
      NMAX = 0
      IDO = NZ - 1
      DO 10 I=2,IDO
         IF( W(I).LE.W(I-1) .OR. W(I).LE.W(I+1) ) GOTO 10
C
C          RECORD MAXIMUM
C
         NMAX = NMAX + 1
         IMAX(NMAX) = I
  10  CONTINUE
      WRITE(11,1000) NMAX
      IF( NMAX .LE. 0 ) RETURN
      WRITE(11,1001) (IMAX(I),W(IMAX(I)),I=1,NMAX)
      RETURN
C
 1000 FORMAT(/,X,I4,41H MAXIMA FOUND IN NORMALIZED WORK FUNCTION,
     $  30H...LISTED BELOW BY ZONE, VALUE)
 1001 FORMAT(8(2X,I4,1PE10.3))
      END
      SUBROUTINE PLTINT(NMAX,N)
      IMPLICIT REAL*8(A-H,O-Z)
C
C          INITIALIZE THE PLOT FILE AND WRITE THE TITLE LINE.
C
      COMMON/PHYPAR/ RP(800),TP(800),VP(800),CV(800),DKDR(800),
     $               DKDT(800),DM1(800),AKAP(800),DM2(800),RM(800),
     $               P(800),G1(800),G3M1(800)
      COMMON/CONST/  ZERO,ONE,TWO,THRE,FOR,TEN,AHF,QRT
      COMMON/OBSERV/ TEFF,RLUMGV,TOTMAS,RPHOTO,CORLUM
      COMMON/LUMINS/ FRFT(800),SORCE(800),DTSORC(800),DVSORC(800)
      COMMON/BLK37/  X(800),TLOG(800),RHOLOG(800),ONEMQ(800)
      DIMENSION PLOG(800)
C
      OPEN (UNIT=12,FILE='CASPLT',STATUS='NEW')
C
      RMS = TOTMAS/1.991D33
      RL = DLOG10(RLUMGV/3.82D33)
      WRITE(12,1000) RMS,RL,TEFF
      QM = AHF*DM1(N)
      DO 10 I=1,N
         X(I+1) = RP(I+1)/RP(N+1)
         TLOG(I) = DLOG10(TP(I))
         PLOG(I) = DLOG10(P(I))
         RHOLOG(I) =-DLOG10(VP(I))
         ONEMQ(N+2-I) =-DLOG10(QM/TOTMAS)
         QM = QM + DM1(N+1-I)
  10  CONTINUE
      ONEMQ(1) =-DLOG10(QM/TOTMAS)
      X(1) = RP(1)/RP(N+1)
      CALL PLTDMP(X,NMAX,N+1,4HX   )
      CALL PLTDMP(TLOG,NMAX,N,4HT   )
      CALL PLTDMP(PLOG,NMAX,N,4HP   )
      CALL PLTDMP(RHOLOG,NMAX,N,4HRHO )
      CALL PLTDMP(ONEMQ,NMAX,N+1,4H1-Q )
      CALL PLTDMP(FRFT,NMAX,N+1,4HFRFT)
      CALL PLTDMP(G1,NMAX,N,4HG1  )
      CALL PLTDMP(G3M1,NMAX,N,4HG3M1)
      RETURN
 1000 FORMAT(X,F7.2,2HMS,3H L=,F7.3,4HLSUN,6H TEFF=,1PE9.2)
      END
      SUBROUTINE PLTDMP(VEC,NMAX,N,ITITL)
      IMPLICIT REAL*8(A-H,O-Z)
C
C          WRITE THE VECTOR VEC TO THE PLOT FILE (TAPE12) WITH APPENDED
C       TITLE ITITL.
C
      DIMENSION VEC(NMAX)
      WRITE(12,1000) N,ITITL,(VEC(I),I=1,N)
      RETURN
 1000 FORMAT(I4,10X,A4,/,(1P6E12.4) )
      END
      SUBROUTINE CPTDMP(VEC,NMAX,N,ITITL)
      IMPLICIT REAL*8(A-H,O-Z)
      COMPLEX*16 VEC
C
C          WRITE THE VECTOR VEC TO THE PLOT FILE (TAPE12) WITH APPENDED
C       TITLE ITITL. IN THIS VERSION THE REAL AND IMAGINARY PARTS ARE
C       DUMPED SEPARATELY.
C                                             11/6/85 WD PESNELL
C
      DIMENSION VEC(NMAX)
      WRITE(12,1000) N,ITITL,(DREAL(VEC(I)),I=1,N)
      WRITE(12,1001) N,ITITL,(DIMAG(VEC(I)),I=1,N)
      RETURN
 1000 FORMAT(I4,10X,A4,X,4HREAL,/,(1P6E12.4) )
 1001 FORMAT(I4,10X,A4,X,4HIMAG,/,(1P6E12.4) )
      END
